
MIDI_OCTOPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003704  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b8  080038b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c0  080038c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  08003938  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003938  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af14  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e28  00000000  00000000  0002aff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069b  00000000  00000000  0002d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c8c  00000000  00000000  0002dd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be62  00000000  00000000  000449ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090751  00000000  00000000  00050851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002254  00000000  00000000  000e0fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e31f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003880 	.word	0x08003880

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003880 	.word	0x08003880

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ADC_Update>:
uint32_t ADCvals[NO_OF_ADCCHANNELS];

int convCompleted=0;


void ADC_Update(uint32_t* ADCconv ){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

	convCompleted=0;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <ADC_Update+0x20>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1,ADCconv,NO_OF_ADCCHANNELS);
 80004de:	2206      	movs	r2, #6
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <ADC_Update+0x24>)
 80004e4:	f000 fea6 	bl	8001234 <HAL_ADC_Start_DMA>


}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	200000e0 	.word	0x200000e0

080004f8 <getConvStatus>:


uint8_t getConvStatus(){
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

	return convCompleted; /*1 means completed*/
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <getConvStatus+0x14>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	2000008c 	.word	0x2000008c

08000510 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

	convCompleted=1;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_ADC_ConvCpltCallback+0x1c>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <HAL_ADC_ConvCpltCallback+0x20>)
 8000520:	f000 ff78 	bl	8001414 <HAL_ADC_Stop_DMA>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000008c 	.word	0x2000008c
 8000530:	200000e0 	.word	0x200000e0

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b092      	sub	sp, #72	; 0x48
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t NoteOn[3];
	 ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
	 uint8_t currentBuffCount=0,nextBufferCounter=0;;
 8000548:	2300      	movs	r3, #0
 800054a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800054e:	2300      	movs	r3, #0
 8000550:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	 uint32_t curTick,NextTick,TimeElapsed;

	 uint32_t MessageSent=0;
 8000554:	2300      	movs	r3, #0
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fca6 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f94a 	bl	80007f4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 fa94 	bl	8000a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000564:	f000 fa72 	bl	8000a4c <MX_DMA_Init>
  MX_ADC1_Init();
 8000568:	f000 f9ae 	bl	80008c8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800056c:	f000 fa44 	bl	80009f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  memset(PAD_Active,0,sizeof(PAD_Active));
 8000570:	2206      	movs	r2, #6
 8000572:	2100      	movs	r1, #0
 8000574:	4895      	ldr	r0, [pc, #596]	; (80007cc <main+0x298>)
 8000576:	f003 f949 	bl	800380c <memset>
  memset(currmax,0,sizeof(currmax));
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2218      	movs	r2, #24
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 f942 	bl	800380c <memset>
  //memset(PAD_FadeOutValue,0,sizeof(PAD_FadeOutValue));
  ADC_Update(&ADCRawBuff[currentBuffCount]);
 8000588:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	4a8e      	ldr	r2, [pc, #568]	; (80007d0 <main+0x29c>)
 8000596:	4413      	add	r3, r2
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff99 	bl	80004d0 <ADC_Update>
  nextBufferCounter++;
 800059e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80005a2:	3301      	adds	r3, #1
 80005a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t midivelocity=0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while(getConvStatus()==0);
 80005ae:	bf00      	nop
 80005b0:	f7ff ffa2 	bl	80004f8 <getConvStatus>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0fa      	beq.n	80005b0 <main+0x7c>
  while (1)
  {

	  //HAL_Delay(10);

	  ADC_Update((uint32_t*)&ADCRawBuff[nextBufferCounter]);
 80005ba:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80005be:	4613      	mov	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4413      	add	r3, r2
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4a82      	ldr	r2, [pc, #520]	; (80007d0 <main+0x29c>)
 80005c8:	4413      	add	r3, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff80 	bl	80004d0 <ADC_Update>

	  memcpy(adcRaw,ADCRawBuff[currentBuffCount],sizeof(adcRaw));
 80005d0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	4a7c      	ldr	r2, [pc, #496]	; (80007d0 <main+0x29c>)
 80005de:	4413      	add	r3, r2
 80005e0:	2218      	movs	r2, #24
 80005e2:	4619      	mov	r1, r3
 80005e4:	487b      	ldr	r0, [pc, #492]	; (80007d4 <main+0x2a0>)
 80005e6:	f003 f93d 	bl	8003864 <memcpy>
	  for(int i=0;i<NO_OF_ADCCHANNELS;i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005ee:	e0d1      	b.n	8000794 <main+0x260>

		  if((adcRaw[i]>PAD_Threshold[i]) && (PAD_Active[i]==0) ){
 80005f0:	4a78      	ldr	r2, [pc, #480]	; (80007d4 <main+0x2a0>)
 80005f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f8:	4977      	ldr	r1, [pc, #476]	; (80007d8 <main+0x2a4>)
 80005fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000600:	429a      	cmp	r2, r3
 8000602:	d916      	bls.n	8000632 <main+0xfe>
 8000604:	4a71      	ldr	r2, [pc, #452]	; (80007cc <main+0x298>)
 8000606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d110      	bne.n	8000632 <main+0xfe>

			  PAD_Active[i] =1;
 8000610:	4a6e      	ldr	r2, [pc, #440]	; (80007cc <main+0x298>)
 8000612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000614:	4413      	add	r3, r2
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
			  EnableScan[i]=1;
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000620:	4413      	add	r3, r2
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
			  PAD_TickCouner[i]=0;
 8000626:	4a6d      	ldr	r2, [pc, #436]	; (80007dc <main+0x2a8>)
 8000628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800062a:	2100      	movs	r1, #0
 800062c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000630:	e0ad      	b.n	800078e <main+0x25a>


		  }else{

		  if((PAD_Active[i]==1) && (EnableScan[i]==1))
 8000632:	4a66      	ldr	r2, [pc, #408]	; (80007cc <main+0x298>)
 8000634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d11c      	bne.n	8000678 <main+0x144>
 800063e:	f107 0208 	add.w	r2, r7, #8
 8000642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d115      	bne.n	8000678 <main+0x144>
		  {
			  if(currmax[i]<adcRaw[i]){
 800064c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	3348      	adds	r3, #72	; 0x48
 8000652:	443b      	add	r3, r7
 8000654:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000658:	495e      	ldr	r1, [pc, #376]	; (80007d4 <main+0x2a0>)
 800065a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000660:	429a      	cmp	r2, r3
 8000662:	d209      	bcs.n	8000678 <main+0x144>
				  currmax[i] = adcRaw[i];
 8000664:	4a5b      	ldr	r2, [pc, #364]	; (80007d4 <main+0x2a0>)
 8000666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	3348      	adds	r3, #72	; 0x48
 8000672:	443b      	add	r3, r7
 8000674:	f843 2c38 	str.w	r2, [r3, #-56]


		  }


		  if((PAD_TickCouner[i]>PAD_ScanWindow[i]) &&(EnableScan[i]==1) && (PAD_Active[i]==1) ){
 8000678:	4a58      	ldr	r2, [pc, #352]	; (80007dc <main+0x2a8>)
 800067a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000680:	4957      	ldr	r1, [pc, #348]	; (80007e0 <main+0x2ac>)
 8000682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000688:	429a      	cmp	r2, r3
 800068a:	d94d      	bls.n	8000728 <main+0x1f4>
 800068c:	f107 0208 	add.w	r2, r7, #8
 8000690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d146      	bne.n	8000728 <main+0x1f4>
 800069a:	4a4c      	ldr	r2, [pc, #304]	; (80007cc <main+0x298>)
 800069c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069e:	4413      	add	r3, r2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d140      	bne.n	8000728 <main+0x1f4>

			  EnableScan[i]=0;
 80006a6:	f107 0208 	add.w	r2, r7, #8
 80006aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
			  midivelocity = (127*currmax[i])/MAX_ADC_CLIP_VOLTAGE;
 80006b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	3348      	adds	r3, #72	; 0x48
 80006b8:	443b      	add	r3, r7
 80006ba:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80006be:	4613      	mov	r3, r2
 80006c0:	01db      	lsls	r3, r3, #7
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	4a47      	ldr	r2, [pc, #284]	; (80007e4 <main+0x2b0>)
 80006c6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ca:	0adb      	lsrs	r3, r3, #11
 80006cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			  currmax[i]=0;
 80006d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	3348      	adds	r3, #72	; 0x48
 80006d6:	443b      	add	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	f843 2c38 	str.w	r2, [r3, #-56]
  			  NoteON(drums[i], 0, midivelocity);
 80006de:	4a42      	ldr	r2, [pc, #264]	; (80007e8 <main+0x2b4>)
 80006e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fa09 	bl	8000b04 <NoteON>
			  PAD_FadeOutValue[i] = (255*currmax[i])/MAX_ADC_CLIP_VOLTAGE;
 80006f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	3348      	adds	r3, #72	; 0x48
 80006f8:	443b      	add	r3, r7
 80006fa:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80006fe:	4613      	mov	r3, r2
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <main+0x2b0>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0adb      	lsrs	r3, r3, #11
 800070c:	b2d9      	uxtb	r1, r3
 800070e:	4a37      	ldr	r2, [pc, #220]	; (80007ec <main+0x2b8>)
 8000710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000712:	4413      	add	r3, r2
 8000714:	460a      	mov	r2, r1
 8000716:	701a      	strb	r2, [r3, #0]
			  EnableFade[i]=1;
 8000718:	463a      	mov	r2, r7
 800071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800071c:	4413      	add	r3, r2
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
			  MessageSent++;
 8000722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000724:	3301      	adds	r3, #1
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
		  }


		  if((PAD_TickCouner[i]> PAD_FadeOutValue[i]) && (EnableFade[i]==1) && (PAD_Active[i]==1)){
 8000728:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <main+0x2a8>)
 800072a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000730:	492e      	ldr	r1, [pc, #184]	; (80007ec <main+0x2b8>)
 8000732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000734:	440a      	add	r2, r1
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	4293      	cmp	r3, r2
 800073a:	d910      	bls.n	800075e <main+0x22a>
 800073c:	463a      	mov	r2, r7
 800073e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d10a      	bne.n	800075e <main+0x22a>
 8000748:	4a20      	ldr	r2, [pc, #128]	; (80007cc <main+0x298>)
 800074a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800074c:	4413      	add	r3, r2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d104      	bne.n	800075e <main+0x22a>
			  EnableFade[i]=0;
 8000754:	463a      	mov	r2, r7
 8000756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000758:	4413      	add	r3, r2
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
			 // NoteOFF(drums[i],0,0);

		  }

		  if(PAD_TickCouner[i]>PAD_Debounce[i]){
 800075e:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <main+0x2a8>)
 8000760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000762:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000766:	4922      	ldr	r1, [pc, #136]	; (80007f0 <main+0x2bc>)
 8000768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800076a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800076e:	429a      	cmp	r2, r3
 8000770:	d904      	bls.n	800077c <main+0x248>

			  PAD_Active[i]=0;
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <main+0x298>)
 8000774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000776:	4413      	add	r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]

		  }

		  PAD_TickCouner[i]++;
 800077c:	4a17      	ldr	r2, [pc, #92]	; (80007dc <main+0x2a8>)
 800077e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	4915      	ldr	r1, [pc, #84]	; (80007dc <main+0x2a8>)
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<NO_OF_ADCCHANNELS;i++){
 800078e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000790:	3301      	adds	r3, #1
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000796:	2b05      	cmp	r3, #5
 8000798:	f77f af2a 	ble.w	80005f0 <main+0xbc>
		  }
	  }
*/
	  /*process the data*/

	  while(getConvStatus()==0); /*Wait for conversion to be completed*/
 800079c:	bf00      	nop
 800079e:	f7ff feab 	bl	80004f8 <getConvStatus>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0fa      	beq.n	800079e <main+0x26a>

	  currentBuffCount = nextBufferCounter;
 80007a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  nextBufferCounter++;
 80007b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007b4:	3301      	adds	r3, #1
 80007b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	  if(nextBufferCounter>=NO_OF_ADCBUFFERS){nextBufferCounter=0;}
 80007ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f67f aefb 	bls.w	80005ba <main+0x86>
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  {
 80007ca:	e6f6      	b.n	80005ba <main+0x86>
 80007cc:	200000c0 	.word	0x200000c0
 80007d0:	20000090 	.word	0x20000090
 80007d4:	200001d0 	.word	0x200001d0
 80007d8:	20000038 	.word	0x20000038
 80007dc:	200000c8 	.word	0x200000c8
 80007e0:	20000020 	.word	0x20000020
 80007e4:	c22e4507 	.word	0xc22e4507
 80007e8:	20000050 	.word	0x20000050
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f003 f802 	bl	800380c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <SystemClock_Config+0xcc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <SystemClock_Config+0xd0>)
 8000842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <SystemClock_Config+0xd0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000868:	2308      	movs	r3, #8
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800086c:	2354      	movs	r3, #84	; 0x54
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f001 ff61 	bl	8002744 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000888:	f000 f936 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2102      	movs	r1, #2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 f9c3 	bl	8002c34 <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008b4:	f000 f920 	bl	8000af8 <Error_Handler>
  }
}
 80008b8:	bf00      	nop
 80008ba:	3750      	adds	r7, #80	; 0x50
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008da:	4b44      	ldr	r3, [pc, #272]	; (80009ec <MX_ADC1_Init+0x124>)
 80008dc:	4a44      	ldr	r2, [pc, #272]	; (80009f0 <MX_ADC1_Init+0x128>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e0:	4b42      	ldr	r3, [pc, #264]	; (80009ec <MX_ADC1_Init+0x124>)
 80008e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b40      	ldr	r3, [pc, #256]	; (80009ec <MX_ADC1_Init+0x124>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <MX_ADC1_Init+0x124>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <MX_ADC1_Init+0x124>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <MX_ADC1_Init+0x124>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000902:	4b3a      	ldr	r3, [pc, #232]	; (80009ec <MX_ADC1_Init+0x124>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000908:	4b38      	ldr	r3, [pc, #224]	; (80009ec <MX_ADC1_Init+0x124>)
 800090a:	4a3a      	ldr	r2, [pc, #232]	; (80009f4 <MX_ADC1_Init+0x12c>)
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <MX_ADC1_Init+0x124>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <MX_ADC1_Init+0x124>)
 8000916:	2206      	movs	r2, #6
 8000918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800091a:	4b34      	ldr	r3, [pc, #208]	; (80009ec <MX_ADC1_Init+0x124>)
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <MX_ADC1_Init+0x124>)
 8000924:	2201      	movs	r2, #1
 8000926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <MX_ADC1_Init+0x124>)
 800092a:	f000 fb2f 	bl	8000f8c <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000934:	f000 f8e0 	bl	8000af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000938:	2300      	movs	r3, #0
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4828      	ldr	r0, [pc, #160]	; (80009ec <MX_ADC1_Init+0x124>)
 800094a:	f000 fddb 	bl	8001504 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000954:	f000 f8d0 	bl	8000af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000958:	2304      	movs	r3, #4
 800095a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_ADC1_Init+0x124>)
 8000966:	f000 fdcd 	bl	8001504 <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000970:	f000 f8c2 	bl	8000af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000974:	2308      	movs	r3, #8
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000978:	2303      	movs	r3, #3
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <MX_ADC1_Init+0x124>)
 8000982:	f000 fdbf 	bl	8001504 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800098c:	f000 f8b4 	bl	8000af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000990:	230b      	movs	r3, #11
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_ADC1_Init+0x124>)
 800099e:	f000 fdb1 	bl	8001504 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009a8:	f000 f8a6 	bl	8000af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009ac:	230c      	movs	r3, #12
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009b0:	2305      	movs	r3, #5
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_ADC1_Init+0x124>)
 80009ba:	f000 fda3 	bl	8001504 <HAL_ADC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80009c4:	f000 f898 	bl	8000af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009c8:	230d      	movs	r3, #13
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80009cc:	2306      	movs	r3, #6
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_ADC1_Init+0x124>)
 80009d6:	f000 fd95 	bl	8001504 <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80009e0:	f000 f88a 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000e0 	.word	0x200000e0
 80009f0:	40012000 	.word	0x40012000
 80009f4:	0f000001 	.word	0x0f000001

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2208      	movs	r2, #8
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f002 fae0 	bl	8002ff4 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f85d 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000188 	.word	0x20000188
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_DMA_Init+0x3c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <MX_DMA_Init+0x3c>)
 8000a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_DMA_Init+0x3c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2038      	movs	r0, #56	; 0x38
 8000a74:	f001 f8cb 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a78:	2038      	movs	r0, #56	; 0x38
 8000a7a:	f001 f8e4 	bl	8001c46 <HAL_NVIC_EnableIRQ>

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x68>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <NoteON>:
#include "main.h"
#include "midi.h"



void NoteON(uint8_t Note,uint8_t channel,uint8_t velocity){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	4613      	mov	r3, r2
 8000b14:	717b      	strb	r3, [r7, #5]
	uint8_t buffer[3];
	memset(buffer,0,3);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fe74 	bl	800380c <memset>

	buffer[0] = (NOTE_ON<<4);
 8000b24:	2390      	movs	r3, #144	; 0x90
 8000b26:	733b      	strb	r3, [r7, #12]
	buffer[0] |= (channel & 0xF0);
 8000b28:	7b3b      	ldrb	r3, [r7, #12]
 8000b2a:	b25a      	sxtb	r2, r3
 8000b2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b30:	f023 030f 	bic.w	r3, r3, #15
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	733b      	strb	r3, [r7, #12]
	buffer[1] = Note;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	737b      	strb	r3, [r7, #13]
	buffer[2] = velocity;
 8000b42:	797b      	ldrb	r3, [r7, #5]
 8000b44:	73bb      	strb	r3, [r7, #14]

	HAL_UART_Transmit(&huart2, buffer, 3, HAL_MAX_DELAY);
 8000b46:	f107 010c 	add.w	r1, r7, #12
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	2203      	movs	r2, #3
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <NoteON+0x5c>)
 8000b52:	f002 fa9f 	bl	8003094 <HAL_UART_Transmit>


}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000188 	.word	0x20000188

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a4d      	ldr	r2, [pc, #308]	; (8000d08 <HAL_ADC_MspInit+0x154>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 8093 	bne.w	8000cfe <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be0:	4a4a      	ldr	r2, [pc, #296]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6453      	str	r3, [r2, #68]	; 0x44
 8000be8:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a43      	ldr	r2, [pc, #268]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a3c      	ldr	r2, [pc, #240]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <HAL_ADC_MspInit+0x158>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = PAD5_Pin|PAD4_Pin|PAD6_Pin|PAD7_Pin;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	482d      	ldr	r0, [pc, #180]	; (8000d10 <HAL_ADC_MspInit+0x15c>)
 8000c5c:	f001 fbee 	bl	800243c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PAD1_Pin|PAD2_Pin|PAD8_Pin|SPARE1_Pin
 8000c60:	23f1      	movs	r3, #241	; 0xf1
 8000c62:	61fb      	str	r3, [r7, #28]
                          |SPARE2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4828      	ldr	r0, [pc, #160]	; (8000d14 <HAL_ADC_MspInit+0x160>)
 8000c74:	f001 fbe2 	bl	800243c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PAD3_Pin;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PAD3_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4823      	ldr	r0, [pc, #140]	; (8000d18 <HAL_ADC_MspInit+0x164>)
 8000c8c:	f001 fbd6 	bl	800243c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <HAL_ADC_MspInit+0x16c>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000cb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd2:	4812      	ldr	r0, [pc, #72]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000cd4:	f000 ffd2 	bl	8001c7c <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8000cde:	f7ff ff0b 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <HAL_ADC_MspInit+0x168>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2012      	movs	r0, #18
 8000cf4:	f000 ff8b 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cf8:	2012      	movs	r0, #18
 8000cfa:	f000 ffa4 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	; 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40012000 	.word	0x40012000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	20000128 	.word	0x20000128
 8000d20:	40026410 	.word	0x40026410

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x8c>)
 8000d9a:	f001 fb4f 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f8a4 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <ADC_IRQHandler+0x10>)
 8000e0e:	f000 f900 	bl	8001012 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000e0 	.word	0x200000e0

08000e1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <DMA2_Stream0_IRQHandler+0x10>)
 8000e22:	f001 f8a1 	bl	8001f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000128 	.word	0x20000128

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f002 fccb 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fb55 	bl	8000534 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e98:	080038c8 	.word	0x080038c8
  ldr r2, =_sbss
 8000e9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ea0:	200001ec 	.word	0x200001ec

08000ea4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <DMA1_Stream0_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 fe91 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe42 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fea9 	bl	8001c62 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 fe71 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000064 	.word	0x20000064
 8000f44:	2000006c 	.word	0x2000006c
 8000f48:	20000068 	.word	0x20000068

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2000006c 	.word	0x2000006c
 8000f70:	200001e8 	.word	0x200001e8

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001e8 	.word	0x200001e8

08000f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e033      	b.n	800100a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d109      	bne.n	8000fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fe02 	bl	8000bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d118      	bne.n	8000ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fd2:	f023 0302 	bic.w	r3, r3, #2
 8000fd6:	f043 0202 	orr.w	r2, r3, #2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fbb2 	bl	8001748 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f023 0303 	bic.w	r3, r3, #3
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8000ffa:	e001      	b.n	8001000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d049      	beq.n	80010dc <HAL_ADC_IRQHandler+0xca>
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d046      	beq.n	80010dc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d12b      	bne.n	80010cc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001078:	2b00      	cmp	r3, #0
 800107a:	d127      	bne.n	80010cc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001094:	2b00      	cmp	r3, #0
 8001096:	d119      	bne.n	80010cc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0220 	bic.w	r2, r2, #32
 80010a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d105      	bne.n	80010cc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fa1f 	bl	8000510 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f06f 0212 	mvn.w	r2, #18
 80010da:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d057      	beq.n	80011a2 <HAL_ADC_IRQHandler+0x190>
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d054      	beq.n	80011a2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d139      	bne.n	8001192 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001124:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001136:	2b00      	cmp	r3, #0
 8001138:	d12b      	bne.n	8001192 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001144:	2b00      	cmp	r3, #0
 8001146:	d124      	bne.n	8001192 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001152:	2b00      	cmp	r3, #0
 8001154:	d11d      	bne.n	8001192 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800115a:	2b00      	cmp	r3, #0
 800115c:	d119      	bne.n	8001192 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800116c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fc56 	bl	8001a44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f06f 020c 	mvn.w	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d017      	beq.n	80011e8 <HAL_ADC_IRQHandler+0x1d6>
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d014      	beq.n	80011e8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d10d      	bne.n	80011e8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f97f 	bl	80014dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f06f 0201 	mvn.w	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011f6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d015      	beq.n	800122a <HAL_ADC_IRQHandler+0x218>
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d012      	beq.n	800122a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f043 0202 	orr.w	r2, r3, #2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f06f 0220 	mvn.w	r2, #32
 8001218:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f968 	bl	80014f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0220 	mvn.w	r2, #32
 8001228:	601a      	str	r2, [r3, #0]
  }
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Start_DMA+0x1e>
 800124e:	2302      	movs	r3, #2
 8001250:	e0ce      	b.n	80013f0 <HAL_ADC_Start_DMA+0x1bc>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d018      	beq.n	800129a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001278:	4b5f      	ldr	r3, [pc, #380]	; (80013f8 <HAL_ADC_Start_DMA+0x1c4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a5f      	ldr	r2, [pc, #380]	; (80013fc <HAL_ADC_Start_DMA+0x1c8>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9a      	lsrs	r2, r3, #18
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800128c:	e002      	b.n	8001294 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	3b01      	subs	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d107      	bne.n	80012ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 8086 	bne.w	80013d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001308:	d106      	bne.n	8001318 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f023 0206 	bic.w	r2, r3, #6
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
 8001316:	e002      	b.n	800131e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_ADC_Start_DMA+0x1cc>)
 8001328:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	4a35      	ldr	r2, [pc, #212]	; (8001404 <HAL_ADC_Start_DMA+0x1d0>)
 8001330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_ADC_Start_DMA+0x1d4>)
 8001338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_ADC_Start_DMA+0x1d8>)
 8001340:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800134a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800135a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800136a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	334c      	adds	r3, #76	; 0x4c
 8001376:	4619      	mov	r1, r3
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f000 fd2c 	bl	8001dd8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10f      	bne.n	80013ac <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d129      	bne.n	80013ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	e020      	b.n	80013ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_ADC_Start_DMA+0x1dc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d11b      	bne.n	80013ee <HAL_ADC_Start_DMA+0x1ba>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d114      	bne.n	80013ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	e00b      	b.n	80013ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f043 0210 	orr.w	r2, r3, #16
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000064 	.word	0x20000064
 80013fc:	431bde83 	.word	0x431bde83
 8001400:	40012300 	.word	0x40012300
 8001404:	08001941 	.word	0x08001941
 8001408:	080019fb 	.word	0x080019fb
 800140c:	08001a17 	.word	0x08001a17
 8001410:	40012000 	.word	0x40012000

08001414 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_ADC_Stop_DMA+0x1a>
 800142a:	2302      	movs	r3, #2
 800142c:	e048      	b.n	80014c0 <HAL_ADC_Stop_DMA+0xac>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d130      	bne.n	80014b6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001462:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d10f      	bne.n	8001492 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fd06 	bl	8001e88 <HAL_DMA_Abort>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80014a0:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1c>
 800151c:	2302      	movs	r3, #2
 800151e:	e105      	b.n	800172c <HAL_ADC_ConfigChannel+0x228>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d925      	bls.n	800157c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	3b1e      	subs	r3, #30
 8001546:	2207      	movs	r2, #7
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43da      	mvns	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	400a      	ands	r2, r1
 8001554:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68d9      	ldr	r1, [r3, #12]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	4603      	mov	r3, r0
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4403      	add	r3, r0
 800156e:	3b1e      	subs	r3, #30
 8001570:	409a      	lsls	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	e022      	b.n	80015c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6919      	ldr	r1, [r3, #16]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	2207      	movs	r2, #7
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4403      	add	r3, r0
 80015b8:	409a      	lsls	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d824      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b05      	subs	r3, #5
 80015dc:	221f      	movs	r2, #31
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b05      	subs	r3, #5
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
 8001612:	e04c      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b0c      	cmp	r3, #12
 800161a:	d824      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b23      	subs	r3, #35	; 0x23
 800162e:	221f      	movs	r2, #31
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b23      	subs	r3, #35	; 0x23
 8001658:	fa00 f203 	lsl.w	r2, r0, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
 8001664:	e023      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b41      	subs	r3, #65	; 0x41
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_ADC_ConfigChannel+0x234>)
 80016b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_ADC_ConfigChannel+0x238>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1cc>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_ADC_ConfigChannel+0x238>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d123      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x1e6>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d11b      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d111      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_ADC_ConfigChannel+0x23c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_ADC_ConfigChannel+0x240>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	0c9a      	lsrs	r2, r3, #18
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001714:	e002      	b.n	800171c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40012300 	.word	0x40012300
 800173c:	40012000 	.word	0x40012000
 8001740:	20000064 	.word	0x20000064
 8001744:	431bde83 	.word	0x431bde83

08001748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <ADC_Init+0x1f0>)
 8001752:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	431a      	orrs	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	021a      	lsls	r2, r3, #8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	4a58      	ldr	r2, [pc, #352]	; (800193c <ADC_Init+0x1f4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d022      	beq.n	8001826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6899      	ldr	r1, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e00f      	b.n	8001846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001844:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0202 	bic.w	r2, r2, #2
 8001854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6899      	ldr	r1, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e1b      	ldrb	r3, [r3, #24]
 8001860:	005a      	lsls	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001882:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	3b01      	subs	r3, #1
 80018a0:	035a      	lsls	r2, r3, #13
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	e007      	b.n	80018bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	051a      	lsls	r2, r3, #20
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018fe:	025a      	lsls	r2, r3, #9
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6899      	ldr	r1, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	029a      	lsls	r2, r3, #10
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40012300 	.word	0x40012300
 800193c:	0f000001 	.word	0x0f000001

08001940 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001956:	2b00      	cmp	r3, #0
 8001958:	d13c      	bne.n	80019d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d12b      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001978:	2b00      	cmp	r3, #0
 800197a:	d127      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001994:	2b00      	cmp	r3, #0
 8001996:	d119      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0220 	bic.w	r2, r2, #32
 80019a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7fe fd9f 	bl	8000510 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019d2:	e00e      	b.n	80019f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff fd85 	bl	80014f0 <HAL_ADC_ErrorCallback>
}
 80019e6:	e004      	b.n	80019f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a06:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fd5d 	bl	80014c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f043 0204 	orr.w	r2, r3, #4
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff fd5a 	bl	80014f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff f974 	bl	8000f74 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e099      	b.n	8001dcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb8:	e00f      	b.n	8001cda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cba:	f7ff f95b 	bl	8000f74 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d908      	bls.n	8001cda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e078      	b.n	8001dcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e8      	bne.n	8001cba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_DMA_Init+0x158>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f023 0307 	bic.w	r3, r3, #7
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d117      	bne.n	8001d9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00e      	beq.n	8001d9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fadf 	bl	8002344 <DMA_CheckFifoParam>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e016      	b.n	8001dcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fa96 	bl	80022d8 <DMA_CalcBaseAndBitshift>
 8001dac:	4603      	mov	r3, r0
 8001dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	223f      	movs	r2, #63	; 0x3f
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f010803f 	.word	0xf010803f

08001dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_Start_IT+0x26>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e040      	b.n	8001e80 <HAL_DMA_Start_IT+0xa8>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d12f      	bne.n	8001e72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fa28 	bl	800227c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	223f      	movs	r2, #63	; 0x3f
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0216 	orr.w	r2, r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0208 	orr.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e005      	b.n	8001e7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e96:	f7ff f86d 	bl	8000f74 <HAL_GetTick>
 8001e9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d008      	beq.n	8001eba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e052      	b.n	8001f60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0216 	bic.w	r2, r2, #22
 8001ec8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <HAL_DMA_Abort+0x62>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0208 	bic.w	r2, r2, #8
 8001ef8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0a:	e013      	b.n	8001f34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0c:	f7ff f832 	bl	8000f74 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d90c      	bls.n	8001f34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e015      	b.n	8001f60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1e4      	bne.n	8001f0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	223f      	movs	r2, #63	; 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f74:	4b8e      	ldr	r3, [pc, #568]	; (80021b0 <HAL_DMA_IRQHandler+0x248>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a8e      	ldr	r2, [pc, #568]	; (80021b4 <HAL_DMA_IRQHandler+0x24c>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2208      	movs	r2, #8
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01a      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0204 	bic.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2201      	movs	r2, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d012      	beq.n	800200a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2204      	movs	r2, #4
 8002010:	409a      	lsls	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	2204      	movs	r2, #4
 800202e:	409a      	lsls	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f043 0204 	orr.w	r2, r3, #4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2210      	movs	r2, #16
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d043      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03c      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	2210      	movs	r2, #16
 8002064:	409a      	lsls	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d018      	beq.n	80020aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d024      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
 8002096:	e01f      	b.n	80020d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
 80020a8:	e016      	b.n	80020d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0208 	bic.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2220      	movs	r2, #32
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 808f 	beq.w	8002208 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8087 	beq.w	8002208 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2220      	movs	r2, #32
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b05      	cmp	r3, #5
 8002110:	d136      	bne.n	8002180 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0216 	bic.w	r2, r2, #22
 8002120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002130:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_DMA_IRQHandler+0x1da>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0208 	bic.w	r2, r2, #8
 8002150:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	223f      	movs	r2, #63	; 0x3f
 8002158:	409a      	lsls	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002172:	2b00      	cmp	r3, #0
 8002174:	d07e      	beq.n	8002274 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	4798      	blx	r3
        }
        return;
 800217e:	e079      	b.n	8002274 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01d      	beq.n	80021ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d031      	beq.n	8002208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
 80021ac:	e02c      	b.n	8002208 <HAL_DMA_IRQHandler+0x2a0>
 80021ae:	bf00      	nop
 80021b0:	20000064 	.word	0x20000064
 80021b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d023      	beq.n	8002208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
 80021c8:	e01e      	b.n	8002208 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10f      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0210 	bic.w	r2, r2, #16
 80021e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	2b00      	cmp	r3, #0
 800220e:	d032      	beq.n	8002276 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d022      	beq.n	8002262 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2205      	movs	r2, #5
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3301      	adds	r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	d307      	bcc.n	8002250 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f2      	bne.n	8002234 <HAL_DMA_IRQHandler+0x2cc>
 800224e:	e000      	b.n	8002252 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002250:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	e000      	b.n	8002276 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002274:	bf00      	nop
    }
  }
}
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002298:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d108      	bne.n	80022bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ba:	e007      	b.n	80022cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3b10      	subs	r3, #16
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <DMA_CalcBaseAndBitshift+0x64>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f2:	4a13      	ldr	r2, [pc, #76]	; (8002340 <DMA_CalcBaseAndBitshift+0x68>)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d909      	bls.n	800231a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	1d1a      	adds	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58
 8002318:	e007      	b.n	800232a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	aaaaaaab 	.word	0xaaaaaaab
 8002340:	080038b0 	.word	0x080038b0

08002344 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11f      	bne.n	800239e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d856      	bhi.n	8002412 <DMA_CheckFifoParam+0xce>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <DMA_CheckFifoParam+0x28>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	0800237d 	.word	0x0800237d
 8002370:	0800238f 	.word	0x0800238f
 8002374:	0800237d 	.word	0x0800237d
 8002378:	08002413 	.word	0x08002413
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d046      	beq.n	8002416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e043      	b.n	8002416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002396:	d140      	bne.n	800241a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239c:	e03d      	b.n	800241a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a6:	d121      	bne.n	80023ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d837      	bhi.n	800241e <DMA_CheckFifoParam+0xda>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <DMA_CheckFifoParam+0x70>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	080023cb 	.word	0x080023cb
 80023bc:	080023c5 	.word	0x080023c5
 80023c0:	080023dd 	.word	0x080023dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e030      	b.n	800242c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d025      	beq.n	8002422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023da:	e022      	b.n	8002422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e4:	d11f      	bne.n	8002426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ea:	e01c      	b.n	8002426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d903      	bls.n	80023fa <DMA_CheckFifoParam+0xb6>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d003      	beq.n	8002400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023f8:	e018      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
      break;
 80023fe:	e015      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e00b      	b.n	800242a <DMA_CheckFifoParam+0xe6>
      break;
 8002412:	bf00      	nop
 8002414:	e00a      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e008      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e006      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e004      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;   
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
    }
  } 
  
  return status; 
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e159      	b.n	800270c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	f040 8148 	bne.w	8002706 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d005      	beq.n	800248e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	2b02      	cmp	r3, #2
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d017      	beq.n	800252c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d123      	bne.n	8002580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a2 	beq.w	8002706 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_GPIO_Init+0x2f0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x202>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x2f4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x1fe>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a47      	ldr	r2, [pc, #284]	; (8002734 <HAL_GPIO_Init+0x2f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x1fa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_GPIO_Init+0x2fc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x1f6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_GPIO_Init+0x300>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x1f2>
 800262a:	2304      	movs	r3, #4
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800262e:	2307      	movs	r3, #7
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_GPIO_Init+0x304>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f aea2 	bls.w	8002458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40013800 	.word	0x40013800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400
 8002734:	40020800 	.word	0x40020800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40021000 	.word	0x40021000
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e267      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d075      	beq.n	800284e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002762:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b04      	cmp	r3, #4
 800276c:	d00c      	beq.n	8002788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276e:	4b85      	ldr	r3, [pc, #532]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002776:	2b08      	cmp	r3, #8
 8002778:	d112      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277a:	4b82      	ldr	r3, [pc, #520]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002786:	d10b      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	4b7e      	ldr	r3, [pc, #504]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05b      	beq.n	800284c <HAL_RCC_OscConfig+0x108>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d157      	bne.n	800284c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e242      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_OscConfig+0x74>
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a75      	ldr	r2, [pc, #468]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e01d      	b.n	80027f4 <HAL_RCC_OscConfig+0xb0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x98>
 80027c2:	4b70      	ldr	r3, [pc, #448]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6f      	ldr	r2, [pc, #444]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6c      	ldr	r2, [pc, #432]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0xb0>
 80027dc:	4b69      	ldr	r3, [pc, #420]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a68      	ldr	r2, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a65      	ldr	r2, [pc, #404]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe fbba 	bl	8000f74 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fbb6 	bl	8000f74 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e207      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0xc0>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fba6 	bl	8000f74 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fba2 	bl	8000f74 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e1f3      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	4b51      	ldr	r3, [pc, #324]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0xe8>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d063      	beq.n	8002922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285a:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d11c      	bne.n	80028ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x152>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e1c7      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4937      	ldr	r1, [pc, #220]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	e03a      	b.n	8002922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b4:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_OscConfig+0x244>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fb5b 	bl	8000f74 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe fb57 	bl	8000f74 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1a8      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4925      	ldr	r1, [pc, #148]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e015      	b.n	8002922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCC_OscConfig+0x244>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fb3a 	bl	8000f74 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002904:	f7fe fb36 	bl	8000f74 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e187      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d036      	beq.n	800299c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_RCC_OscConfig+0x248>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fb1a 	bl	8000f74 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe fb16 	bl	8000f74 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e167      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x240>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x200>
 8002962:	e01b      	b.n	800299c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_OscConfig+0x248>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe fb03 	bl	8000f74 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	e00e      	b.n	8002990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002972:	f7fe faff 	bl	8000f74 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d907      	bls.n	8002990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e150      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
 8002984:	40023800 	.word	0x40023800
 8002988:	42470000 	.word	0x42470000
 800298c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ea      	bne.n	8002972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8097 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	4b7d      	ldr	r3, [pc, #500]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a7c      	ldr	r2, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b7a      	ldr	r3, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b77      	ldr	r3, [pc, #476]	; (8002bb8 <HAL_RCC_OscConfig+0x474>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e6:	4b74      	ldr	r3, [pc, #464]	; (8002bb8 <HAL_RCC_OscConfig+0x474>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a73      	ldr	r2, [pc, #460]	; (8002bb8 <HAL_RCC_OscConfig+0x474>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fabf 	bl	8000f74 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe fabb 	bl	8000f74 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e10c      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_OscConfig+0x474>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2ea>
 8002a20:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a63      	ldr	r2, [pc, #396]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	e01c      	b.n	8002a68 <HAL_RCC_OscConfig+0x324>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x30c>
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a5e      	ldr	r2, [pc, #376]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a5b      	ldr	r2, [pc, #364]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0x324>
 8002a50:	4b58      	ldr	r3, [pc, #352]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a57      	ldr	r2, [pc, #348]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f023 0304 	bic.w	r3, r3, #4
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fa80 	bl	8000f74 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa7c 	bl	8000f74 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0cb      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ee      	beq.n	8002a78 <HAL_RCC_OscConfig+0x334>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fa6a 	bl	8000f74 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fa66 	bl	8000f74 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0b5      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1ee      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a1 	beq.w	8002c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d05c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d141      	bne.n	8002b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_RCC_OscConfig+0x478>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fa3a 	bl	8000f74 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fa36 	bl	8000f74 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e087      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	491b      	ldr	r1, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x478>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe fa0f 	bl	8000f74 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fa0b 	bl	8000f74 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e05c      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x416>
 8002b78:	e054      	b.n	8002c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCC_OscConfig+0x478>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f9f8 	bl	8000f74 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe f9f4 	bl	8000f74 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e045      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x444>
 8002ba6:	e03d      	b.n	8002c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e038      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x4ec>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d121      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d11a      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0cc      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d90c      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b8      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca0:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	494d      	ldr	r1, [pc, #308]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d044      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d119      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e067      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4934      	ldr	r1, [pc, #208]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d24:	f7fe f926 	bl	8000f74 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe f922 	bl	8000f74 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e04f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d20c      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e032      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4916      	ldr	r1, [pc, #88]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	490e      	ldr	r1, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dba:	f000 f821 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	490a      	ldr	r1, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	5ccb      	ldrb	r3, [r1, r3]
 8002dce:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f886 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023c00 	.word	0x40023c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	08003898 	.word	0x08003898
 8002df8:	20000064 	.word	0x20000064
 8002dfc:	20000068 	.word	0x20000068

08002e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e04:	b090      	sub	sp, #64	; 0x40
 8002e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e10:	2300      	movs	r3, #0
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x40>
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	f200 80a1 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x16c>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e32:	e09b      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e34:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e38:	e09b      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e3a:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e3e:	e098      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e40:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d028      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	627a      	str	r2, [r7, #36]	; 0x24
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e6c:	fb03 f201 	mul.w	r2, r3, r1
 8002e70:	2300      	movs	r3, #0
 8002e72:	fb00 f303 	mul.w	r3, r0, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e7a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e80:	460a      	mov	r2, r1
 8002e82:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e86:	4413      	add	r3, r2
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	61fa      	str	r2, [r7, #28]
 8002e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e9a:	f7fd f99b 	bl	80001d4 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea6:	e053      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	2200      	movs	r2, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	617a      	str	r2, [r7, #20]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eba:	f04f 0b00 	mov.w	fp, #0
 8002ebe:	4652      	mov	r2, sl
 8002ec0:	465b      	mov	r3, fp
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f04f 0100 	mov.w	r1, #0
 8002eca:	0159      	lsls	r1, r3, #5
 8002ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed0:	0150      	lsls	r0, r2, #5
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	ebb2 080a 	subs.w	r8, r2, sl
 8002eda:	eb63 090b 	sbc.w	r9, r3, fp
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002eea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002eee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ef2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ef6:	eb63 0509 	sbc.w	r5, r3, r9
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	00eb      	lsls	r3, r5, #3
 8002f04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f08:	00e2      	lsls	r2, r4, #3
 8002f0a:	4614      	mov	r4, r2
 8002f0c:	461d      	mov	r5, r3
 8002f0e:	eb14 030a 	adds.w	r3, r4, sl
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	eb45 030b 	adc.w	r3, r5, fp
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f26:	4629      	mov	r1, r5
 8002f28:	028b      	lsls	r3, r1, #10
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f30:	4621      	mov	r1, r4
 8002f32:	028a      	lsls	r2, r1, #10
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	60fa      	str	r2, [r7, #12]
 8002f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f44:	f7fd f946 	bl	80001d4 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3740      	adds	r7, #64	; 0x40
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	017d7840 	.word	0x017d7840

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000064 	.word	0x20000064

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	080038a8 	.word	0x080038a8

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fd0:	f7ff ffdc 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0b5b      	lsrs	r3, r3, #13
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080038a8 	.word	0x080038a8

08002ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e042      	b.n	800308c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fe82 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2224      	movs	r2, #36	; 0x24
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f973 	bl	8003324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800304c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800305c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800306c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d175      	bne.n	80031a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_UART_Transmit+0x2c>
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e06e      	b.n	80031a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2221      	movs	r2, #33	; 0x21
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d2:	f7fd ff4f 	bl	8000f74 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d108      	bne.n	8003100 <HAL_UART_Transmit+0x6c>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e003      	b.n	8003108 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003108:	e02e      	b.n	8003168 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f848 	bl	80031aa <UART_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e03a      	b.n	80031a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003140:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3302      	adds	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e007      	b.n	800315a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3301      	adds	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1cb      	bne.n	800310a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2140      	movs	r1, #64	; 0x40
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f814 	bl	80031aa <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e006      	b.n	80031a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ba:	e03b      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d037      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fd fed6 	bl	8000f74 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <UART_WaitOnFlagUntilTimeout+0x30>
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e03a      	b.n	8003254 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d023      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d020      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d01d      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b08      	cmp	r3, #8
 8003204:	d116      	bne.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f81d 	bl	800325c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2208      	movs	r2, #8
 8003226:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e00f      	b.n	8003254 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	429a      	cmp	r2, r3
 8003250:	d0b4      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b095      	sub	sp, #84	; 0x54
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003284:	643a      	str	r2, [r7, #64]	; 0x40
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800328a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3314      	adds	r3, #20
 800329e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3314      	adds	r3, #20
 80032b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e5      	bne.n	8003298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d119      	bne.n	8003308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f023 0310 	bic.w	r3, r3, #16
 80032ea:	647b      	str	r3, [r7, #68]	; 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f4:	61ba      	str	r2, [r7, #24]
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	613b      	str	r3, [r7, #16]
   return(result);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003316:	bf00      	nop
 8003318:	3754      	adds	r7, #84	; 0x54
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003328:	b0c0      	sub	sp, #256	; 0x100
 800332a:	af00      	add	r7, sp, #0
 800332c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	ea40 0301 	orr.w	r3, r0, r1
 800334c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	431a      	orrs	r2, r3
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	431a      	orrs	r2, r3
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800337c:	f021 010c 	bic.w	r1, r1, #12
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800338a:	430b      	orrs	r3, r1
 800338c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	6999      	ldr	r1, [r3, #24]
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	ea40 0301 	orr.w	r3, r0, r1
 80033aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b8f      	ldr	r3, [pc, #572]	; (80035f0 <UART_SetConfig+0x2cc>)
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d005      	beq.n	80033c4 <UART_SetConfig+0xa0>
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b8d      	ldr	r3, [pc, #564]	; (80035f4 <UART_SetConfig+0x2d0>)
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d104      	bne.n	80033ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c4:	f7ff fe02 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 80033c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033cc:	e003      	b.n	80033d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ce:	f7ff fde9 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80033d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e0:	f040 810c 	bne.w	80035fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033f6:	4622      	mov	r2, r4
 80033f8:	462b      	mov	r3, r5
 80033fa:	1891      	adds	r1, r2, r2
 80033fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80033fe:	415b      	adcs	r3, r3
 8003400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003406:	4621      	mov	r1, r4
 8003408:	eb12 0801 	adds.w	r8, r2, r1
 800340c:	4629      	mov	r1, r5
 800340e:	eb43 0901 	adc.w	r9, r3, r1
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003426:	4690      	mov	r8, r2
 8003428:	4699      	mov	r9, r3
 800342a:	4623      	mov	r3, r4
 800342c:	eb18 0303 	adds.w	r3, r8, r3
 8003430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003434:	462b      	mov	r3, r5
 8003436:	eb49 0303 	adc.w	r3, r9, r3
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800344a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800344e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003452:	460b      	mov	r3, r1
 8003454:	18db      	adds	r3, r3, r3
 8003456:	653b      	str	r3, [r7, #80]	; 0x50
 8003458:	4613      	mov	r3, r2
 800345a:	eb42 0303 	adc.w	r3, r2, r3
 800345e:	657b      	str	r3, [r7, #84]	; 0x54
 8003460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003468:	f7fc feb4 	bl	80001d4 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <UART_SetConfig+0x2d4>)
 8003472:	fba3 2302 	umull	r2, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	011c      	lsls	r4, r3, #4
 800347a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003484:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	1891      	adds	r1, r2, r2
 8003492:	64b9      	str	r1, [r7, #72]	; 0x48
 8003494:	415b      	adcs	r3, r3
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800349c:	4641      	mov	r1, r8
 800349e:	eb12 0a01 	adds.w	sl, r2, r1
 80034a2:	4649      	mov	r1, r9
 80034a4:	eb43 0b01 	adc.w	fp, r3, r1
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034bc:	4692      	mov	sl, r2
 80034be:	469b      	mov	fp, r3
 80034c0:	4643      	mov	r3, r8
 80034c2:	eb1a 0303 	adds.w	r3, sl, r3
 80034c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ca:	464b      	mov	r3, r9
 80034cc:	eb4b 0303 	adc.w	r3, fp, r3
 80034d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034e8:	460b      	mov	r3, r1
 80034ea:	18db      	adds	r3, r3, r3
 80034ec:	643b      	str	r3, [r7, #64]	; 0x40
 80034ee:	4613      	mov	r3, r2
 80034f0:	eb42 0303 	adc.w	r3, r2, r3
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
 80034f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034fe:	f7fc fe69 	bl	80001d4 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4611      	mov	r1, r2
 8003508:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <UART_SetConfig+0x2d4>)
 800350a:	fba3 2301 	umull	r2, r3, r3, r1
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2264      	movs	r2, #100	; 0x64
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	1acb      	subs	r3, r1, r3
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <UART_SetConfig+0x2d4>)
 8003520:	fba3 2302 	umull	r2, r3, r3, r2
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800352c:	441c      	add	r4, r3
 800352e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003538:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800353c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	1891      	adds	r1, r2, r2
 8003546:	63b9      	str	r1, [r7, #56]	; 0x38
 8003548:	415b      	adcs	r3, r3
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003550:	4641      	mov	r1, r8
 8003552:	1851      	adds	r1, r2, r1
 8003554:	6339      	str	r1, [r7, #48]	; 0x30
 8003556:	4649      	mov	r1, r9
 8003558:	414b      	adcs	r3, r1
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003568:	4659      	mov	r1, fp
 800356a:	00cb      	lsls	r3, r1, #3
 800356c:	4651      	mov	r1, sl
 800356e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003572:	4651      	mov	r1, sl
 8003574:	00ca      	lsls	r2, r1, #3
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	4603      	mov	r3, r0
 800357c:	4642      	mov	r2, r8
 800357e:	189b      	adds	r3, r3, r2
 8003580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003584:	464b      	mov	r3, r9
 8003586:	460a      	mov	r2, r1
 8003588:	eb42 0303 	adc.w	r3, r2, r3
 800358c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800359c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035a4:	460b      	mov	r3, r1
 80035a6:	18db      	adds	r3, r3, r3
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035aa:	4613      	mov	r3, r2
 80035ac:	eb42 0303 	adc.w	r3, r2, r3
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ba:	f7fc fe0b 	bl	80001d4 <__aeabi_uldivmod>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <UART_SetConfig+0x2d4>)
 80035c4:	fba3 1302 	umull	r1, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	2164      	movs	r1, #100	; 0x64
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	3332      	adds	r3, #50	; 0x32
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <UART_SetConfig+0x2d4>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	f003 0207 	and.w	r2, r3, #7
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4422      	add	r2, r4
 80035ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035ec:	e106      	b.n	80037fc <UART_SetConfig+0x4d8>
 80035ee:	bf00      	nop
 80035f0:	40011000 	.word	0x40011000
 80035f4:	40011400 	.word	0x40011400
 80035f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003600:	2200      	movs	r2, #0
 8003602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800360a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800360e:	4642      	mov	r2, r8
 8003610:	464b      	mov	r3, r9
 8003612:	1891      	adds	r1, r2, r2
 8003614:	6239      	str	r1, [r7, #32]
 8003616:	415b      	adcs	r3, r3
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800361e:	4641      	mov	r1, r8
 8003620:	1854      	adds	r4, r2, r1
 8003622:	4649      	mov	r1, r9
 8003624:	eb43 0501 	adc.w	r5, r3, r1
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	00eb      	lsls	r3, r5, #3
 8003632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003636:	00e2      	lsls	r2, r4, #3
 8003638:	4614      	mov	r4, r2
 800363a:	461d      	mov	r5, r3
 800363c:	4643      	mov	r3, r8
 800363e:	18e3      	adds	r3, r4, r3
 8003640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003644:	464b      	mov	r3, r9
 8003646:	eb45 0303 	adc.w	r3, r5, r3
 800364a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800365a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800366a:	4629      	mov	r1, r5
 800366c:	008b      	lsls	r3, r1, #2
 800366e:	4621      	mov	r1, r4
 8003670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003674:	4621      	mov	r1, r4
 8003676:	008a      	lsls	r2, r1, #2
 8003678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800367c:	f7fc fdaa 	bl	80001d4 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4b60      	ldr	r3, [pc, #384]	; (8003808 <UART_SetConfig+0x4e4>)
 8003686:	fba3 2302 	umull	r2, r3, r3, r2
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	011c      	lsls	r4, r3, #4
 800368e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800369c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036a0:	4642      	mov	r2, r8
 80036a2:	464b      	mov	r3, r9
 80036a4:	1891      	adds	r1, r2, r2
 80036a6:	61b9      	str	r1, [r7, #24]
 80036a8:	415b      	adcs	r3, r3
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b0:	4641      	mov	r1, r8
 80036b2:	1851      	adds	r1, r2, r1
 80036b4:	6139      	str	r1, [r7, #16]
 80036b6:	4649      	mov	r1, r9
 80036b8:	414b      	adcs	r3, r1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c8:	4659      	mov	r1, fp
 80036ca:	00cb      	lsls	r3, r1, #3
 80036cc:	4651      	mov	r1, sl
 80036ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d2:	4651      	mov	r1, sl
 80036d4:	00ca      	lsls	r2, r1, #3
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	4642      	mov	r2, r8
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e4:	464b      	mov	r3, r9
 80036e6:	460a      	mov	r2, r1
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80036fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003708:	4649      	mov	r1, r9
 800370a:	008b      	lsls	r3, r1, #2
 800370c:	4641      	mov	r1, r8
 800370e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003712:	4641      	mov	r1, r8
 8003714:	008a      	lsls	r2, r1, #2
 8003716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800371a:	f7fc fd5b 	bl	80001d4 <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4611      	mov	r1, r2
 8003724:	4b38      	ldr	r3, [pc, #224]	; (8003808 <UART_SetConfig+0x4e4>)
 8003726:	fba3 2301 	umull	r2, r3, r3, r1
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2264      	movs	r2, #100	; 0x64
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	1acb      	subs	r3, r1, r3
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	3332      	adds	r3, #50	; 0x32
 8003738:	4a33      	ldr	r2, [pc, #204]	; (8003808 <UART_SetConfig+0x4e4>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003744:	441c      	add	r4, r3
 8003746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374a:	2200      	movs	r2, #0
 800374c:	673b      	str	r3, [r7, #112]	; 0x70
 800374e:	677a      	str	r2, [r7, #116]	; 0x74
 8003750:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003754:	4642      	mov	r2, r8
 8003756:	464b      	mov	r3, r9
 8003758:	1891      	adds	r1, r2, r2
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	415b      	adcs	r3, r3
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003764:	4641      	mov	r1, r8
 8003766:	1851      	adds	r1, r2, r1
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	4649      	mov	r1, r9
 800376c:	414b      	adcs	r3, r1
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800377c:	4659      	mov	r1, fp
 800377e:	00cb      	lsls	r3, r1, #3
 8003780:	4651      	mov	r1, sl
 8003782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003786:	4651      	mov	r1, sl
 8003788:	00ca      	lsls	r2, r1, #3
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	4603      	mov	r3, r0
 8003790:	4642      	mov	r2, r8
 8003792:	189b      	adds	r3, r3, r2
 8003794:	66bb      	str	r3, [r7, #104]	; 0x68
 8003796:	464b      	mov	r3, r9
 8003798:	460a      	mov	r2, r1
 800379a:	eb42 0303 	adc.w	r3, r2, r3
 800379e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	663b      	str	r3, [r7, #96]	; 0x60
 80037aa:	667a      	str	r2, [r7, #100]	; 0x64
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037b8:	4649      	mov	r1, r9
 80037ba:	008b      	lsls	r3, r1, #2
 80037bc:	4641      	mov	r1, r8
 80037be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c2:	4641      	mov	r1, r8
 80037c4:	008a      	lsls	r2, r1, #2
 80037c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037ca:	f7fc fd03 	bl	80001d4 <__aeabi_uldivmod>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <UART_SetConfig+0x4e4>)
 80037d4:	fba3 1302 	umull	r1, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	3332      	adds	r3, #50	; 0x32
 80037e6:	4a08      	ldr	r2, [pc, #32]	; (8003808 <UART_SetConfig+0x4e4>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	f003 020f 	and.w	r2, r3, #15
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4422      	add	r2, r4
 80037fa:	609a      	str	r2, [r3, #8]
}
 80037fc:	bf00      	nop
 80037fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003802:	46bd      	mov	sp, r7
 8003804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003808:	51eb851f 	.word	0x51eb851f

0800380c <memset>:
 800380c:	4402      	add	r2, r0
 800380e:	4603      	mov	r3, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	f803 1b01 	strb.w	r1, [r3], #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4d0d      	ldr	r5, [pc, #52]	; (8003854 <__libc_init_array+0x38>)
 8003820:	4c0d      	ldr	r4, [pc, #52]	; (8003858 <__libc_init_array+0x3c>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	2600      	movs	r6, #0
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	4d0b      	ldr	r5, [pc, #44]	; (800385c <__libc_init_array+0x40>)
 800382e:	4c0c      	ldr	r4, [pc, #48]	; (8003860 <__libc_init_array+0x44>)
 8003830:	f000 f826 	bl	8003880 <_init>
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	2600      	movs	r6, #0
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	f855 3b04 	ldr.w	r3, [r5], #4
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	f855 3b04 	ldr.w	r3, [r5], #4
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	080038c0 	.word	0x080038c0
 8003858:	080038c0 	.word	0x080038c0
 800385c:	080038c0 	.word	0x080038c0
 8003860:	080038c4 	.word	0x080038c4

08003864 <memcpy>:
 8003864:	440a      	add	r2, r1
 8003866:	4291      	cmp	r1, r2
 8003868:	f100 33ff 	add.w	r3, r0, #4294967295
 800386c:	d100      	bne.n	8003870 <memcpy+0xc>
 800386e:	4770      	bx	lr
 8003870:	b510      	push	{r4, lr}
 8003872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800387a:	4291      	cmp	r1, r2
 800387c:	d1f9      	bne.n	8003872 <memcpy+0xe>
 800387e:	bd10      	pop	{r4, pc}

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
